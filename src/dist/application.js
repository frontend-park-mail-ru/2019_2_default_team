!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return Array.isArray(e)?function(e,t){for(var n,r="",i="",a=Array.isArray(t),u=0;u<e.length;u++)(n=o(e[u]))&&(a&&t[u]&&(n=l(n)),r=r+i+n,i=" ");return r}(e,t):e&&"object"==typeof e?function(e){var t="",n="";for(var o in e)o&&e[o]&&r.call(e,o)&&(t=t+n+o,n=" ");return t}(e):e||""}function i(e){if(!e)return"";if("object"==typeof e){var t="";for(var n in e)r.call(e,n)&&(t=t+n+":"+e[n]+";");return t}return e+""}function a(e,t,n,r){if(!1===t||null==t||!t&&("class"===e||"style"===e))return"";if(!0===t)return" "+(r?e:e+'="'+e+'"');var o=typeof t;return"object"!==o&&"function"!==o||"function"!=typeof t.toJSON||(t=t.toJSON()),"string"==typeof t||(t=JSON.stringify(t),n||-1===t.indexOf('"'))?(n&&(t=l(t))," "+e+'="'+t+'"'):" "+e+"='"+t.replace(/'/g,"&#39;")+"'"}t.merge=function e(t,n){if(1===arguments.length){for(var r=t[0],o=1;o<t.length;o++)r=e(r,t[o]);return r}for(var a in n)if("class"===a){var u=t[a]||[];t[a]=(Array.isArray(u)?u:[u]).concat(n[a]||[])}else if("style"===a){u=(u=i(t[a]))&&";"!==u[u.length-1]?u+";":u;var l=i(n[a]);l=l&&";"!==l[l.length-1]?l+";":l,t[a]=u+l}else t[a]=n[a];return t},t.classes=o,t.style=i,t.attr=a,t.attrs=function(e,t){var n="";for(var u in e)if(r.call(e,u)){var l=e[u];if("class"===u){l=o(l),n=a(u,l,!1,t)+n;continue}"style"===u&&(l=i(l)),n+=a(u,l,!1,t)}return n};var u=/["&<>]/;function l(e){var t=""+e,n=u.exec(t);if(!n)return e;var r,o,i,a="";for(r=n.index,o=0;r<t.length;r++){switch(t.charCodeAt(r)){case 34:i="&quot;";break;case 38:i="&amp;";break;case 60:i="&lt;";break;case 62:i="&gt;";break;default:continue}o!==r&&(a+=t.substring(o,r)),o=r+1,a+=i}return o!==r?a+t.substring(o,r):a}t.escape=l,t.rethrow=function e(t,r,o,i){if(!(t instanceof Error))throw t;if(!("undefined"==typeof window&&r||i))throw t.message+=" on line "+o,t;try{i=i||n(3).readFileSync(r,"utf8")}catch(n){e(t,null,o)}var a=3,u=i.split("\n"),l=Math.max(o-a,0),c=Math.min(u.length,o+a);a=u.slice(l,c).map((function(e,t){var n=t+l+1;return(n==o?"  > ":"    ")+n+"| "+e})).join("\n");throw t.path=r,t.message=(r||"Pug")+":"+o+"\n"+a+"\n\n"+t.message,t}},function(e,t,n){var r=n(0);e.exports=function(e){var t,n="",o={};n+="<style>.container{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: #5d2d2e;\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='120' height='120' viewBox='0 0 120 120'%3E%3Cpolygon fill='%23b86969' fill-opacity='.1' points='120 0 120 60 90 30 60 0 0 0 0 0 60 60 0 120 60 120 90 90 120 60 120 0'/%3E%3C/svg%3E\");\n    padding: 15px;\n}\n\nh1 {\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    color: white;\n    margin-bottom: 50px;\n}\n\n.card-item{\n    background-color: aliceblue;\n    width: 360px;\n    height: 360px;\n}\n.card {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    text-align: center;\n    font-family: arial;\n    max-width: 380px;\n    align-self: stretch;\n    /*-webkit-transition: all 0.3s ease;;*/\n    /*-moz-transition: all 0.3s ease;;*/\n    /*-o-transition: all 0.3s ease;;*/\n    /*transition: all 0.3s ease;*/\n    background-color: #c7ecee;\n    display: flex;\n    grid-template-rows: 10px 10px;\n    position: relative;\n}\n\n/*.card:hover {*/\n/*    -webkit-transform: scale(1.2);*/\n/*    -ms-transform: scale(1.2);*/\n/*    transform: scale(1.2);*/\n/*}*/\n\n.price {\n    color: grey;\n    font-size: 22px;\n}\n\n.card button {\n    display: flex;\n    border: none;\n    outline: 0;\n    padding: 12px;\n    color: white;\n    background-color: #222f3e;\n    text-align: center;\n    cursor: pointer;\n    width: 100%;\n    font-size: 18px;\n    flex-direction: column;\n}\n\n.card button:hover {\n    opacity: 0.7;\n}\n\n.card-deck {\n    /* max-height: 550px; */\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n}\n\n.card {\n    margin: 10px;\n}\n\nh1{\n    margin-bottom: auto;\n}\n\n.card-item-blur {\n    align-self: end;\n    height: 120px;\n    background: rgba(1,0,0,0.6);\n    position: absolute;\n    width: 360px;\n    color: #dff9fb;\n}\n\n.card-item-blur:hover {\n    display: block;\n}\n\nhtml {\n    height: 100%;\n}\n\n\n\n.body {\n    /* display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-items: center;\n    align-self: center;\n    padding: 10px; */\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\na {\n    transition-property: transform;\n    transition-duration: 0.1s;\n    cursor: pointer;\n}\n\na:hover {\n    transform: scale(1.25);\n}\n\na:active {\n    transform: scale(1.25) translateY(-2px);\n}</style>";var i="https://static.karofilm.ru/uploads/film/desktop/e3/b6/4b/5215d5811b80298172dad73fd1.jpg";o["card-deck"]=t=function(e,o,i){this&&this.block,this&&this.attributes;n=n+'<div class="card"><div class="card-item"><img'+r.attr("src",o,!0,!0)+'></div><div class="card-item-blur"'+r.attr("src",o,!0,!0)+"><h1>"+r.escape(null==(t=e)?"":t)+"</h1><a"+(r.attr("onclick",i,!0,!0)+r.attr("href",i,!0,!0))+' data-section="film">Подробнее</a></div></div>'},n+='<div class="container"><h1>Фильмы</h1><div class="body">';for(var a=3;a>0;)(function(){var e=[1,2,3,4];if("number"==typeof e.length)for(var t=0,n=e.length;t<n;t++){o["card-deck"]("Joker",i)}else{n=0;for(var t in e){n++;o["card-deck"]("Joker",i)}}}).call(this),a--;return n+="</div></div>"}},function(e,t,n){var r=n(0);e.exports=function(e){var t,n="",o={},i=e||{};return function(e,i,a){n+="<style>.menu {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.menu-el-right {\n    float: right;\n}\n\n.menu-el-left {\n    float: left;\n}\n\n.inner-menu-element {\n    display: block;\n    color: white;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    text-align: center;\n    padding: 14px 16px;\n    text-decoration: none;\n    width: 90px;\n    transition-property: transform;\n    transition-duration: 0.25s;\n}\n\n.inner-menu-element:hover {\n    transform: translateY(-5px);\n}\n\n.inner-menu-element:active {\n    transform: translateY(-5px) scale(1.33);\n}</style>",o["item-right"]=t=function(e,o,i){this&&this.block,this&&this.attributes;n=n+'<li class="menu-el-right"><a class="inner-menu-element"'+r.attr("href",o,!0,!0)+r.attr("data-section",i,!0,!0)+">"+r.escape(null==(t=e)?"":t)+"</a></li>"},o["item-left"]=t=function(e,o,i){this&&this.block,this&&this.attributes;n=n+'<li class="menu-el-left"><a class="inner-menu-element"'+r.attr("href",o,!0,!0)+r.attr("data-section",i,!0,!0)+">"+r.escape(null==(t=e)?"":t)+"</a></li>"};var u;n+='<ul class="menu">',o["item-left"]("Афиша","/poster","poster"),o["item-left"]("О нас","/about","about"),null!=(null!=(u=new e("id"+"=([^;]+)").exec(i.cookie))?a(u[1]):null)?(o["item-right"]("Выход","/signout","signout"),o["item-right"]("Профиль","/profile","profile")):(o["item-right"]("Регистрация","/signup","signup"),o["item-right"]("Вход","/signin","signin")),n+="</ul>"}.call(this,"RegExp"in i?i.RegExp:"undefined"!=typeof RegExp?RegExp:void 0,"document"in i?i.document:"undefined"!=typeof document?document:void 0,"unescape"in i?i.unescape:"undefined"!=typeof unescape?unescape:void 0),n}},function(e,t){},function(e,t,n){"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(n,!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n.r(t);var u=["/profile","/poster","/film"],l=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.root=t,this.routes=new Map,this.currentRoute=null,window.onpopstate=function(e){window.location.pathname&&n.route({path:window.location.pathname,addToHistory:!1})}}var t,n,r;return t=e,r=[{key:"_normalizePath",value:function(e){return"/"===e.charAt(e.length-1)&&"/"!==e?e.slice(0,e.length-1):e}}],(n=[{key:"redirect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.route({path:e,data:t,addToHistory:!0})}},{key:"add",value:function(e,t){this.routes.set(e,t)}},{key:"route",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.path,n=e.data,r=void 0===n?{}:n,i=e.addToHistory,a=void 0===i||i,l=this.routes.get(this._getRoutePath(this.currentRoute));l&&l.close(),a&&window.history.pushState(null,null,t);var c=t.split("?")[0];console.log(c);var s=this._getRoutePath(c);if(this.routes.has(s)){var f=this.routes.get(s);if(u.find((function(e){return e===s}))){var p=this._extractIdFromPath(t);r=o({id:p},r)}console.log("router-> render(data)",r),this.currentRoute=t,f.openWithData(r)}else if(this.routes.has(c)){var d=this.routes.get(c);console.log("router-> render(data)",r),this.currentRoute=t,d.openWithData(r)}}},{key:"_getRoutePath",value:function(e){if(e)return"/"+e.split("/")[1]}},{key:"start",value:function(){var t=this;window.addEventListener("click",(function(n){"A"===n.target.tagName&&(n.preventDefault(),t.route({path:e._normalizePath(n.target.pathname),addToHistory:!0}))}),!0),this.route({path:e._normalizePath(window.location.pathname),addToHistory:!0})}},{key:"_extractIdFromPath",value:function(e){return e.split("/").pop()}}])&&a(t.prototype,n),r&&a(t,r),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[{}];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.events=new Map,n.forEach((function(e){return t.events.set(e,[])}))}var t,n,r;return t=e,(n=[{key:"subscribeToEvent",value:function(e,t){if(!this.events.has(e))throw new Error("EventBus: Unknown event ".concat(e));this.events.get(e).push(t)}},{key:"triggerEvent",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(!this.events.has(e))throw new Error("EventBus: Unknown event ".concat(e));var o=this.events.get(e);o.forEach((function(e){return e.apply(void 0,n)}))}},{key:"dispatchEvent",value:function(e){var t;if(void 0!==e){if(void 0!==this.events[e]){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return(t=this.events)[e].apply(t,r)}console.log("No such event: "+e)}else console.log("No event value")}}])&&c(t.prototype,n),r&&c(t,r),e}(),f=n(1),p=n.n(f);function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v="Password must have: 8 symbols, 1 numeral, 1 upper case letter and 1 lowercase.",h=/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,y=/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.{8,})/,g=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"validateEmail",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t||n&&!e.validateEmailRegex(t))return"Invalid email"}},{key:"validatePassword",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t||n&&!e.validatePassRegex(t))return v}},{key:"validateEmailRegex",value:function(e){return h.test(String(e).toLowerCase())}},{key:"validatePassRegex",value:function(e){return y.test(String(e))}},{key:"isEmptyField",value:function(e){return""===e}}],(n=null)&&d(t.prototype,n),r&&d(t,r),e}();function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._root=t,this._globalEventBus=r,this._template=n,this.isViewClosed=!0}var t,n,r;return t=e,r=[{key:"_addInputError",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";e&&e.classList.add("input_invalid"),t&&(t.classList.add("error_active"),t.innerHTML=n)}},{key:"_validateObligatoryInputs",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=!1;return t&&t.forEach((function(t){var r=t.nextElementSibling;g.isEmptyField(t.value)?(e._addInputError(t,r,"Обязательное поле"),n=!0):e._removeInputError(t,r)})),n}},{key:"_removeInputError",value:function(e,t){e&&e.classList.remove("input_invalid"),t&&(t.classList.remove("error_active"),t.innerHTML="")}}],(n=[{key:"render",value:function(e){this._root.innerHTML=this._template(e),this.isViewClosed=!1,this.onRender()}},{key:"onRender",value:function(){}},{key:"hide",value:function(){this._root.innerHTML="",this.isViewClosed=!0}},{key:"merge",value:function(e){this._data=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(n,!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this._data,{},e)}}])&&w(t.prototype,n),r&&w(t,r),e}(),k={checkAuth:"checkAuth",checkAuthResponse:"authR",signOut:"signOut",signOutResponse:"signOutR",signIn:"signIn",signInSuccess:"signInS",signInFailed:"signInF",signUpCustomer:"signUpCustomer",signUpSuccess:"signUpS",signUpFailed:"signUpF"},P={loadProfile:"loadProfile",loadProfileSuccess:"loadProfileS",loadProfileFailed:"loadProfileF",saveButtonClicked:"saveButtonC",saveProfile:"saveProfile",saveProfileSuccess:"saveProfileS",saveProfileFailed:"saveProfileF",saveAvatar:"saveAvatar",saveAvatarSuccess:"saveAvatarS",saveAvatarFailed:"saveAvatarF"};function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function x(e,t,n){return(x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var R=function(e){function t(e,n,r){var o,i,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),i=this,(o=!(a=S(t).call(this,e,p.a,n,r))||"object"!==_(a)&&"function"!=typeof a?E(i):a)._globalEventBus.subscribeToEvent(k.checkAuthResponse,o._onAuthResponse.bind(E(o))),o}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.merge(e),this.isViewClosed=!1,this._globalEventBus.triggerEvent(k.checkAuth),x(S(t.prototype),"render",this).call(this,e)}},{key:"onRender",value:function(){}},{key:"_onAuthResponse",value:function(e){this.isViewClosed||(this.merge(e),x(S(t.prototype),"render",this).call(this,this._data))}}])&&j(n.prototype,r),o&&j(n,o),t}(O);function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var A=function e(t,n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),C(this,"_view",new O),C(this,"openWithData",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o._view.render(e)})),C(this,"close",(function(){o._view.hide()})),this._root=t,this._globalEventBus=n,this._router=r};function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var U=function(e){function t(e,n,r){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(o=F(this,I(t).call(this,e,n,r)))._view=new R(o._root,o._globalEventBus),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(t,e),t}(A);function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"doGet",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/";return fetch(e.getServerUrl()+t,{method:"GET",mode:"no-cors",credentials:"include"})}},{key:"doPost",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.getServerUrl();return fetch(r+t,{method:"POST",mode:"cors",credentials:"include",body:JSON.stringify(n),headers:{"Content-Type":"application/json;charset=utf-8"}})}},{key:"doDelete",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/";return fetch(e.getServerUrl()+t,{method:"DELETE",mode:"cors",credentials:"include"})}},{key:"doPut",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return fetch(e.getServerUrl()+t,{method:"PUT",mode:"cors",credentials:"include",body:JSON.stringify(n),headers:{"Content-Type":"application/json;charset=utf-8"}})}},{key:"doPostFormData",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.url,r=void 0===n?"/":n,o=t.body,i=void 0===o?{}:o,a=localStorage.getItem("token");return fetch(e.getServerUrl()+r,{method:"POST",body:i,mode:"cors",credentials:"include",headers:{"X-CSRF-Token":a}})}},{key:"doPutFormData",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",n=arguments.length>1?arguments[1]:void 0;return fetch(e.getServerUrl()+t,{method:"PUT",mode:"cors",credentials:"include",body:n})}},{key:"getServerUrl",value:function(){return"http://127.0.0.1:8080"}}],(n=null)&&z(t.prototype,n),r&&z(t,r),e}();function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var G=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"login",value:function(e){var t=e.email,n=e.password;return L.doPost("/sessions/",{email:t,password:n})}},{key:"authCheck",value:function(){return L.doGet("/session")}},{key:"logout",value:function(){return L.doDelete("/session/")}},{key:"register",value:function(e){var t=e.email,n=e.password,r=e.username;return L.doPost("/users/",{email:t,password:n,username:r})}},{key:"editAvatar",value:function(e){var t=e.avatar,n=new FormData;return n.append("file",t.avatar),L.doPostFormData("/users/images/",n)}},{key:"editProfile",value:function(e){var t=e.username,n=e.description;return L.doPut("/users/",{username:t,description:n})}},{key:"getProfileInfo",value:function(){return L.doGet("/users/")}},{key:"getAnotherUserInfo",value:function(e){var t=e.userID;return L.doGet("/users/".concat(t,"/"))}},{key:"getFilmInfo",value:function(e){var t=e.filmID;return L.doGet("/films/".concat(t,"/"))}},{key:"getPageFilms",value:function(e){var t=e.pageID;return L.doGet("/films/".concat(t,"/"))}},{key:"addNewFilm",value:function(e){var t=e.title,n=e.description,r=e.genres,o=e.date,i=e.actors,a=e.directors,u=e.rating;return L.doPost("/films/",{title:t,description:n,genres:r,date:o,actors:i,directors:a,rating:u})}},{key:"checkSession",value:function(){return L.doGet({url:"/auth"})}}],(n=null)&&M(t.prototype,n),r&&M(t,r),e}();function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var H=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"_loadPage",value:function(e){var t=this;G.getPageFilms(e).then((function(e){e.ok?e.json().then((function(e){t._globalEventBus.triggerEvent("loadSuccess",e)})):e.json().then((function(e){t._globalEventBus.triggerEvent("loadFailed",e)}))})).catch((function(e){console.error(e)}))}},{key:"setGlobalEventBus",value:function(e){this._globalEventBus=e,this._globalEventBus.subscribeToEvent(k.checkAuth,this._onCheckAuth.bind(this))}},{key:"_onCheckAuth",value:function(){G.authCheck().then((function(e){}))}}])&&N(t.prototype,n),r&&N(t,r),e}()),J=n(2),V=n.n(J);function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $(e,t,n){return($="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=X(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function X(e){return(X=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Z(e,t){return(Z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var K=function(e){function t(e,n){var r,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,(r=!(i=X(t).call(this,e,V.a,n))||"object"!==q(i)&&"function"!=typeof i?Y(o):i)._globalEventBus.subscribeToEvent(k.checkAuthResponse,r._onAuthResponse.bind(Y(r))),r}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Z(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$(X(t.prototype),"render",this).call(this,e)}},{key:"_onAuthResponse",value:function(e){$(X(t.prototype),"render",this).call(this,e)}}])&&W(n.prototype,r),o&&W(n,o),t}(O);function Q(e){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(e,t){return!t||"object"!==Q(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function te(e){return(te=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var re=function(e){function t(e,n,r){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(o=ee(this,te(t).call(this,e,n,r)))._view=new K(o._root,o._globalEventBus),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(t,e),t}(A);document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".page"),t=document.querySelector("header"),n=document.querySelector(".main-content"),r=new s([k,P].map((function(e){return Object.values(e)})).flat()),o={poster:H};Object.values(o).forEach((function(e){return e.setGlobalEventBus(r)}));var i=new l(e),a=new re(t,r,i),u=new U(n,r,i);a.openWithData(),i.add("/",u),i.start()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,